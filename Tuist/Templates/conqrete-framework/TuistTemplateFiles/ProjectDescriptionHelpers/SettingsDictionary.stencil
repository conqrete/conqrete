//
//  SettingsDictionary.swift
//  {{ projectName }}
//
//  Created by {{ author }} on {{ date }}.
//  Copyright Â© {{ year }} {{ organizationIdentifier }}. All rights reserved.
//

import ProjectDescription

extension SettingsDictionary {

    /// Sets `"SWIFT_ACTIVE_COMPILATION_CONDITIONS"` to `conditions` array
    func activeCompilationConditions(_ conditions: String...) -> SettingsDictionary {
        var result = self
        result["SWIFT_ACTIVE_COMPILATION_CONDITIONS"] = .array(conditions)
        return result
    }

    /// Sets `"GCC_PREPROCESSOR_DEFINITIONS"` to `conditions` array
    func gccPreprocessorDefinitions(_ conditions: String...) -> SettingsDictionary {
        var result = self
        result["GCC_PREPROCESSOR_DEFINITIONS"] = .array(conditions)
        return result
    }

    /// Sets `"DYLIB_CURRENT_VERSION"` and `"DYLIB_COMPATIBILITY_VERSION"` to `version` string
    func currentLibraryVersion(_ version: String) -> SettingsDictionary {
        var result = self
        result["DYLIB_CURRENT_VERSION"] = .string(version)
        result["DYLIB_COMPATIBILITY_VERSION"] = .string(version)
        return result
    }

    /// Sets `"GENERATE_INFOPLIST_FILE"` to `"YES"` / `"NO"`
    func generateInfoPlistFile(_ generate: Bool) -> SettingsDictionary {
        var result = self
        result["GENERATE_INFOPLIST_FILE"] = generate ? .string("YES") : .string("NO")
        return result
    }

    /// Sets `"APPLICATION_EXTENSION_API_ONLY"` to `"YES"` / `"NO"`
    func onlyAllowAppExtensionAPI(_ allow: Bool) -> SettingsDictionary {
        var result = self
        result["APPLICATION_EXTENSION_API_ONLY"] = allow ? .string("YES") : .string("NO")
        return result
    }

    /// Sets `"OTHER_LDFLAGS"` to `flags` array
    func otherLinkerFlags(_ flags: String...) -> SettingsDictionary {
        var result = self
        result["OTHER_LDFLAGS"] = .array(flags)
        return result
    }
}
