import ProjectDescription

extension Target {

    static func makeTarget(
        name: String,
        product: Product,
        bundleId: String,
        hasResources: Bool,
        hasHeaders: Bool,
        hasEntitlements: Bool,
        scripts: [TargetScript],
        dependencies: [TargetDependency],
        settings: Settings
    ) -> Target {
        var resources: ResourceFileElements?
        if hasResources {
            resources = ["\(name)/Resources/**"]
        }

        var headers: Headers?
        if hasHeaders {
            headers = .headers(
                public: "\(name)/Headers/Public/**",
                private: "\(name)/Headers/Private/**",
                project: nil,
                exclusionRule: .publicExcludesPrivateAndProject
            )
        }

        var entitlementsPath: Path?
        if hasEntitlements {
            entitlementsPath = "\(name)/SupportFiles/\(name).entitlements"
        }

        return Target(
            name: name,
            platform: .iOS,
            product: product,
            bundleId: bundleId,
            deploymentTarget: .minimumDeploymentTarget(),
            infoPlist: .file(path: "\(name)/SupportFiles/Info.plist"),
            sources: ["\(name)/Sources/**/*.swift"],
            resources: resources,
            headers: headers,
            entitlements: entitlementsPath,
            scripts: scripts,
            dependencies: dependencies,
            settings: settings
        )
    }

    static func makeUnitTestsTarget(
        testTargetName: String,
        bundleId: String,
        scripts: [TargetScript],
        dependencies: [TargetDependency],
        settings: Settings
    ) -> Target {
        return Target(
            name: testTargetName,
            platform: .iOS,
            product: .unitTests,
            bundleId: bundleId,
            deploymentTarget: .minimumDeploymentTarget(),
            sources: ["\(testTargetName)/Sources/**/*.swift"],
            scripts: scripts,
            dependencies: dependencies
        )
    }
}
